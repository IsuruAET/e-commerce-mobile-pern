{
	"info": {
		"_postman_id": "2ac527e8-5f6d-4ab5-b9b6-9ea59ae798d6",
		"name": "E2E Test Runner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9828330",
		"_collection_link": "https://web888-6736.postman.co/workspace/ecommerce-postman-workspace~4c2852f9-3434-46a4-a1b7-cfb42961ecb9/collection/9828330-2ac527e8-5f6d-4ab5-b9b6-9ea59ae798d6?action=share&source=collection_link&creator=9828330"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register Normal User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"pm.environment.set('registered_user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\",\n    \"name\": \"Test User\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Registered User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Normal User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"",
									"// Test if tokens are present",
									"pm.test('Access token is present', function () {",
									"    pm.expect(jsonData.accessToken).to.exist;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Profile updated successfully\");",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Test User\",\n    \"phone\": \"+1987654321\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    const newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
									"    pm.environment.set(\"user_password\", newPassword);\r",
									"}\r",
									"\r",
									"// Validate response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Password changed successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"{{user_password}}\",\n    \"newPassword\": \"newpassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Normal User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Google OAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"HTML contains third-party email\", () => {\r",
									"    const body = pm.response.text(); // get raw HTML\r",
									"    pm.expect(body).to.include('data-third-party-email=\"isuru.g.test@gmail.com\"');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"google"
							]
						}
					},
					"response": []
				},
				{
					"name": "Google OAuth Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/callback",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"google",
								"callback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response time\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Parse response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"If an account exists with this email, you will receive a password reset link\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password - F",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// // Validate status code\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// if (pm.response.code === 200) {\r",
									"//     const resetPassword = JSON.parse(pm.request.body.raw).password;\r",
									"//     pm.environment.set(\"user_password\", resetPassword);\r",
									"// }\r",
									"\r",
									"// // Clear password reset token successful reset password\r",
									"// pm.environment.unset('reset_password_token');\r",
									"\r",
									"// // Verify reset password token cleared\r",
									"// pm.test('Reset Password Token is cleared', function () {\r",
									"//     pm.expect(pm.environment.get('reset_password_token')).to.be.undefined;\r",
									"// });\r",
									"\r",
									"// // Validate response time\r",
									"// pm.test(\"Response time is less than 500ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"// // Parse response body\r",
									"// let jsonData = pm.response.json();\r",
									"\r",
									"// // Validate response structure\r",
									"// pm.test(\"Response contains success message\", function () {\r",
									"//     pm.expect(jsonData).to.have.property(\"message\");\r",
									"//     pm.expect(jsonData.message).to.equal(\"Password reset successful\");\r",
									"// });\r",
									"\r",
									"// Failed Scenario\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validate response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"This password reset link has expired or is invalid. Please request a new one.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\n    \"password\": \"reset-password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Normal User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/deactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"deactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Registered User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"User deleted successfully\");\r",
									"});\r",
									"\r",
									"// Clear registered user id and admin created user id\r",
									"pm.environment.unset('registered_user_id');\r",
									"\r",
									"// Verify registered user id and admin created user id are cleared\r",
									"pm.test('Registered user id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('registered_user_id')).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{registered_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{registered_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response is an array', function () {",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Define the available permission IDs",
									"const availablePermissions = jsonData.data.map(item => item.id);",
									"",
									"// Shuffle the array and take the first two (or all if length < 2)",
									"function getRandomTwo(arr) {",
									"    const shuffled = [...arr].sort(() => 0.5 - Math.random());",
									"    return shuffled.slice(0, 2);",
									"}",
									"",
									"// Get two random IDs",
									"const selectedPermissions = getRandomTwo(availablePermissions);",
									"",
									"// Set them as an environment variable as a comma-separated string",
									"pm.environment.set(\"permission_Ids\", JSON.stringify(selectedPermissions));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles/permissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set role_id environment variable",
									"pm.environment.set('role_id', jsonData.data.id);",
									"",
									"// Test response status",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Role created successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Role\",\n    \"description\": \"Description of the new role\",\n    \"permissions\": {{permission_Ids}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const userRole = jsonData.data.find(r => r.name === \"user\");",
									"if (userRole) pm.environment.set(\"user_role_id\", userRole.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Role Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles/options",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Role by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('permissions');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles/{{role_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('permissions');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Role updated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Role\",\n    \"description\": \"Updated description of the role\",\n    \"permissions\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/roles/{{role_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Role deleted successfully\");",
									"});",
									"",
									"// Clear role Id and permission Ids",
									"pm.environment.unset('role_id');",
									"pm.environment.unset('permission_Ids');",
									"",
									"// Verify role Id and permission Ids are cleared",
									"pm.test('Role is cleared', function () {",
									"    pm.expect(pm.environment.get('role_id')).to.be.undefined;",
									"});",
									"pm.test('Role is cleared', function () {",
									"    pm.expect(pm.environment.get('permission_Ids')).to.be.undefined;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles/{{role_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Login Admin User - 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 5000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Set role_id environment variable\r",
									"pm.environment.set('admin_created_user_id', jsonData.data.id);\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"User created successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1234567890\",\n    \"roleId\": \"{{user_role_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User - 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Password Creation Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"If an account exists with this email, you will receive a password creation link\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/request-password-creation",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"request-password-creation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Password - F",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// // Validate status code\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// if (pm.response.code === 200) {\r",
									"//     const createdPassword = JSON.parse(pm.request.body.raw).password;\r",
									"//     pm.environment.set(\"user_password\", createdPassword);\r",
									"// }\r",
									"\r",
									"// // Clear password create token successful create password\r",
									"// pm.environment.unset('create_password_token');\r",
									"\r",
									"// // Verify create password token cleared\r",
									"// pm.test('Create Password Token is cleared', function () {\r",
									"//     pm.expect(pm.environment.get('create_password_token')).to.be.undefined;\r",
									"// });\r",
									"\r",
									"// // Validate response time\r",
									"// pm.test(\"Response time is less than 500ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"// });\r",
									"\r",
									"// // Parse response body\r",
									"// let jsonData = pm.response.json();\r",
									"\r",
									"// // Validate response structure\r",
									"// pm.test(\"Response contains success message\", function () {\r",
									"//     pm.expect(jsonData).to.have.property(\"message\");\r",
									"//     pm.expect(jsonData.message).to.equal(\"Password created successfully\");\r",
									"// });\r",
									"\r",
									"// Failed Scenario\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validate response time\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"This password reset link has expired or is invalid. Please request a new one.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\n    \"password\": \"create-password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/create-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"create-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin User - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"stylist_id\", pm.response.json().data.list.find(u => u.role?.name === \"stylist\")?.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users?roleIds=&search=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "roleIds",
									"value": ""
								},
								{
									"key": "isDeactivated",
									"value": ""
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "search",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('email');\r",
									"    pm.expect(jsonData.data).to.have.property('name');\r",
									"    pm.expect(jsonData.data).to.have.property('phone');\r",
									"    pm.expect(jsonData.data).to.have.property('isDeactivated');\r",
									"    pm.expect(jsonData.data).to.have.property('deactivatedAt');\r",
									"    pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"    pm.expect(jsonData.data).to.have.property('role');\r",
									"    pm.expect(jsonData.data.role).to.have.property('id');\r",
									"    pm.expect(jsonData.data.role).to.have.property('name');\r",
									"    pm.expect(jsonData.data.role).to.have.property('description');\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('email');\r",
									"    pm.expect(jsonData.data).to.have.property('name');\r",
									"    pm.expect(jsonData.data).to.have.property('phone');\r",
									"    pm.expect(jsonData.data).to.have.property('isDeactivated');\r",
									"    pm.expect(jsonData.data).to.have.property('deactivatedAt');\r",
									"    pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"    pm.expect(jsonData.data).to.have.property('role');\r",
									"    pm.expect(jsonData.data.role).to.have.property('id');\r",
									"    pm.expect(jsonData.data.role).to.have.property('name');\r",
									"    pm.expect(jsonData.data.role).to.have.property('description');\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"User updated successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated.email@example.com\",\n    \"phone\": \"+1987654323\",\n    \"roleId\": \"{{user_role_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"User deactivated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}/deactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}",
								"deactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reactivate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"User reactivated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}/reactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}",
								"reactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"User deleted successfully\");\r",
									"});\r",
									"\r",
									"// Clear env variables\r",
									"pm.environment.unset('user_role_id');\r",
									"pm.environment.unset('registered_user_id');\r",
									"pm.environment.unset('admin_created_user_id');\r",
									"\r",
									"// Verify cleared env variables\r",
									"pm.test('User role id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('user_role_id')).to.be.undefined;\r",
									"});\r",
									"pm.test('Registered user id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('registered_user_id')).to.be.undefined;\r",
									"});\r",
									"pm.test('Admin created user id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('admin_created_user_id')).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set category_id environment variable",
									"pm.environment.set('category_id', jsonData.data.id);",
									"",
									"// Test response status",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"    pm.expect(jsonData.data).to.have.property('image');",
									"    pm.expect(jsonData.data).to.have.property('isActive');",
									"});",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Category added successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Hair Services\",\n    \"description\": \"Professional hair cutting, styling, and treatment services\",\n    \"image\": \"https://example.com/hair-services.jpg\",\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData.data).to.have.property('list');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"service_category_id\", pm.response.json().data.list[0].id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/categories?count=10&page=1&sortBy=name&sortOrder=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "isActive",
									"value": "true",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Category Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/options",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"    pm.expect(jsonData.data).to.have.property('image');",
									"    pm.expect(jsonData.data).to.have.property('isActive');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"    pm.expect(jsonData.data).to.have.property('image');",
									"    pm.expect(jsonData.data).to.have.property('isActive');",
									"});",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Category updated successfully\");",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Hair Services\",\n    \"description\": \"Updated description for hair services\",\n    \"image\": \"https://example.com/updated-hair-services.jpg\",\n    \"isActive\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reactivate Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Category reactivated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{category_id}}/reactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{category_id}}",
								"reactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Category deactivated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{category_id}}/deactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{category_id}}",
								"deactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Category deleted successfully\");",
									"});",
									"",
									"// Clear category id",
									"pm.environment.unset('category_id');",
									"",
									"// Verify category id cleared",
									"pm.test('Category is cleared', function () {",
									"    pm.expect(pm.environment.get('category_id')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set service_id environment variable",
									"pm.environment.set('service_id', jsonData.data.id);",
									"",
									"// Test response status",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"    pm.expect(jsonData.data).to.have.property('price');",
									"    pm.expect(jsonData.data).to.have.property('duration');",
									"    pm.expect(jsonData.data).to.have.property('categoryId');",
									"    pm.expect(jsonData.data).to.have.property('images');",
									"    pm.expect(jsonData.data).to.have.property('isActive');",
									"});",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Service created successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Hair Cut\",\n    \"description\": \"Professional hair cutting service with styling\",\n    \"price\": 25.99,\n    \"duration\": 30,\n    \"categoryId\": \"{{service_category_id}}\",\n    \"images\": [\n        \"https://example.com/haircut1.jpg\"\n    ],\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/services",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"appointment_service_id\", pm.response.json().data.list[0].id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services?count=10&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "categoryIds",
									"value": "{{service_category_id}}",
									"description": "Filter by category ID",
									"disabled": true
								},
								{
									"key": "isActive",
									"value": "true",
									"description": "Filter by active status",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "name",
									"description": "Sort field",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "Sort order",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Active Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services/active?count=10&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"active"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "categoryIds",
									"value": "{{service_category_id}}",
									"description": "Filter by category ID",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "name",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Service Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services/options",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Service by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('name');\r",
									"    pm.expect(jsonData.data).to.have.property('description');\r",
									"    pm.expect(jsonData.data).to.have.property('price');\r",
									"    pm.expect(jsonData.data).to.have.property('duration');\r",
									"    pm.expect(jsonData.data).to.have.property('categoryId');\r",
									"    pm.expect(jsonData.data).to.have.property('images');\r",
									"    pm.expect(jsonData.data).to.have.property('isActive');\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"{{service_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('name');\r",
									"    pm.expect(jsonData.data).to.have.property('description');\r",
									"    pm.expect(jsonData.data).to.have.property('price');\r",
									"    pm.expect(jsonData.data).to.have.property('duration');\r",
									"    pm.expect(jsonData.data).to.have.property('categoryId');\r",
									"    pm.expect(jsonData.data).to.have.property('images');\r",
									"    pm.expect(jsonData.data).to.have.property('isActive');\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Service updated successfully\");\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Hair Cut1\",\n    \"description\": \"Updated description for hair cutting service\",\n    \"price\": 29.91,\n    \"duration\": 45,\n    \"categoryId\": \"{{service_category_id}}\",\n    \"images\": [\n        \"https://example.com/updated-haircut.jpg\"\n    ],\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"{{service_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Service deactivated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services/{{service_id}}/deactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"{{service_id}}",
								"deactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reactivate Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Service reactivated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services/{{service_id}}/reactivate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"{{service_id}}",
								"reactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Service deleted successfully\");\r",
									"});\r",
									"\r",
									"// Clear service id and service category id\r",
									"pm.environment.unset('service_id');\r",
									"pm.environment.unset('service_category_id');\r",
									"\r",
									"// Verify service id and service category id cleared\r",
									"pm.test('Service is cleared', function () {\r",
									"    pm.expect(pm.environment.get('service_id')).to.be.undefined;\r",
									"});\r",
									"pm.test('Service category id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('service_category_id')).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services",
								"{{service_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Appointments",
			"item": [
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"stylist_id\", pm.response.json().data.list.find(u => u.role?.name === \"stylist\")?.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users?roleIds=&search=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "roleIds",
									"value": ""
								},
								{
									"key": "isDeactivated",
									"value": ""
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "search",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"appointment_service_id\", pm.response.json().data.list[0].id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/services?count=10&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"services"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "categoryIds",
									"value": "{{service_category_id}}",
									"description": "Filter by category ID",
									"disabled": true
								},
								{
									"key": "isActive",
									"value": "true",
									"description": "Filter by active status",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "name",
									"description": "Sort field",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "Sort order",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set appointment id environment variable",
									"pm.environment.set('appointment_id', jsonData.data.id);",
									"",
									"// Test response status",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"    pm.expect(jsonData.data).to.have.property('stylistId');",
									"    pm.expect(jsonData.data).to.have.property('dateTime');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('notes');",
									"    pm.expect(jsonData.data).to.have.property('estimatedDuration');",
									"    pm.expect(jsonData.data).to.have.property('totalPrice');",
									"    pm.expect(jsonData.data).to.have.property('services');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('stylist');",
									"});",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Appointment created successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stylistId\": \"{{stylist_id}}\",\n    \"dateTime\": \"2024-04-10T10:00:00Z\",\n    \"notes\": \"Please provide a haircut with styling\",\n    \"services\": [\n        {\n            \"serviceId\": \"{{appointment_service_id}}\",\n            \"numberOfPeople\": 2\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData.data).to.have.property('list');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Set first appointment ID as environment variable",
									"if (jsonData.data.list.length > 0 && jsonData.data.list[0].id) {",
									"    pm.environment.set('appointment_id', jsonData.data.list[0].id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments"
							],
							"query": [
								{
									"key": "count",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "userIds",
									"value": "{{user_id}}",
									"disabled": true
								},
								{
									"key": "stylistIds",
									"value": "{{stylist_id}}",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "COMPLETED"
								},
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00Z",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59Z",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "dateTime"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Appointment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('userId');\r",
									"    pm.expect(jsonData.data).to.have.property('stylistId');\r",
									"    pm.expect(jsonData.data).to.have.property('dateTime');\r",
									"    pm.expect(jsonData.data).to.have.property('status');\r",
									"    pm.expect(jsonData.data).to.have.property('notes');\r",
									"    pm.expect(jsonData.data).to.have.property('estimatedDuration');\r",
									"    pm.expect(jsonData.data).to.have.property('totalPrice');\r",
									"    pm.expect(jsonData.data).to.have.property('services');\r",
									"    pm.expect(jsonData.data).to.have.property('user');\r",
									"    pm.expect(jsonData.data).to.have.property('stylist');\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/{{appointment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"{{appointment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set first appointment ID as environment variable\r",
									"if (jsonData.data.list.length > 0 && jsonData.data.list[0].id) {\r",
									"    pm.environment.set('appointment_id', jsonData.data.list[0].id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/user/appointments?count=10&page=1&sortBy=dateTime&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"user",
								"appointments"
							],
							"query": [
								{
									"key": "count",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "stylistIds",
									"value": "{{stylist_id}}",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "COMPLETED",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00Z",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59Z",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "dateTime"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Appointment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"    pm.expect(jsonData.data).to.have.property('stylistId');",
									"    pm.expect(jsonData.data).to.have.property('dateTime');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('notes');",
									"    pm.expect(jsonData.data).to.have.property('estimatedDuration');",
									"    pm.expect(jsonData.data).to.have.property('totalPrice');",
									"    pm.expect(jsonData.data).to.have.property('services');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('stylist');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/user/appointments/{{appointment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"user",
								"appointments",
								"{{appointment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('userId');\r",
									"    pm.expect(jsonData.data).to.have.property('stylistId');\r",
									"    pm.expect(jsonData.data).to.have.property('dateTime');\r",
									"    pm.expect(jsonData.data).to.have.property('status');\r",
									"    pm.expect(jsonData.data).to.have.property('notes');\r",
									"    pm.expect(jsonData.data).to.have.property('estimatedDuration');\r",
									"    pm.expect(jsonData.data).to.have.property('totalPrice');\r",
									"    pm.expect(jsonData.data).to.have.property('services');\r",
									"    pm.expect(jsonData.data).to.have.property('user');\r",
									"    pm.expect(jsonData.data).to.have.property('stylist');\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Appointment updated successfully\");\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stylistId\": \"{{stylist_id}}\",\n    \"dateTime\": \"2024-04-15T10:30:00Z\",\n    \"notes\": \"Please provide a haircut with styling\",\n    \"services\": [\n        {\n            \"serviceId\": \"{{appointment_service_id}}\",\n            \"numberOfPeople\": 2\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/{{appointment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"{{appointment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Appointment Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData).to.have.property('success');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test('Response has required data', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('id');\r",
									"    pm.expect(jsonData.data).to.have.property('userId');\r",
									"    pm.expect(jsonData.data).to.have.property('stylistId');\r",
									"    pm.expect(jsonData.data).to.have.property('dateTime');\r",
									"    pm.expect(jsonData.data).to.have.property('status');\r",
									"    pm.expect(jsonData.data).to.have.property('notes');\r",
									"    pm.expect(jsonData.data).to.have.property('estimatedDuration');\r",
									"    pm.expect(jsonData.data).to.have.property('totalPrice');\r",
									"    pm.expect(jsonData.data).to.have.property('services');\r",
									"    pm.expect(jsonData.data).to.have.property('user');\r",
									"    pm.expect(jsonData.data).to.have.property('stylist');\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Appointment status updated successfully\");\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Clear env variables\r",
									"pm.environment.unset('appointment_id');\r",
									"pm.environment.unset('appointment_service_id');\r",
									"pm.environment.unset('stylist_id');\r",
									"\r",
									"// Verify cleared env variables\r",
									"pm.test('Appointment id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('appointment_id')).to.be.undefined;\r",
									"});\r",
									"pm.test('Appointment serviceid is cleared', function () {\r",
									"    pm.expect(pm.environment.get('appointment_service_id')).to.be.undefined;\r",
									"});\r",
									"pm.test('Stylist id is cleared', function () {\r",
									"    pm.expect(pm.environment.get('stylist_id')).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"CANCELLED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/{{appointment_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"{{appointment_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Total Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has totalServices field', function () {",
									"    pm.expect(jsonData.data).to.have.property('totalServices');",
									"});",
									"",
									"// Test data type",
									"pm.test('totalServices is a number', function () {",
									"    pm.expect(typeof jsonData.data.totalServices).to.equal('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/stats/services",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"stats",
								"services"
							],
							"query": [
								{
									"key": "stylistId",
									"value": "{{stylist_id}}",
									"description": "Filter by stylist ID (optional)",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "{{start_date}}",
									"description": "Start date for filtering (optional)",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{end_date}}",
									"description": "End date for filtering (optional)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Total Income",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has totalIncome field', function () {",
									"    pm.expect(jsonData.data).to.have.property('totalIncome');",
									"});",
									"",
									"// Test data type",
									"pm.test('totalIncome is a number', function () {",
									"    pm.expect(typeof jsonData.data.totalIncome).to.equal('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/stats/income",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"stats",
								"income"
							],
							"query": [
								{
									"key": "stylistId",
									"value": "{{stylist_id}}",
									"description": "Filter by stylist ID (optional)",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "{{start_date}}",
									"description": "Start date for filtering (optional)",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{end_date}}",
									"description": "End date for filtering (optional)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Stylist User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Set environment variables",
									"pm.environment.set('access_token', jsonData.accessToken);",
									"pm.environment.set('user_id', jsonData.user.id);",
									"",
									"// Extract CSRF token from response headers or cookies",
									"const csrfToken = pm.response.headers.get('X-CSRF-Token') || pm.cookies.get('csrf_token');",
									"if (csrfToken) {",
									"    pm.environment.set('csrf_token', csrfToken);",
									"}",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test data types",
									"pm.test('Data types are correct', function () {",
									"    pm.expect(typeof jsonData.accessToken).to.equal('string');",
									"    pm.expect(typeof jsonData.user.id).to.equal('string');",
									"    pm.expect(typeof jsonData.user.email).to.equal('string');",
									"    pm.expect(typeof jsonData.user.name).to.equal('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{stylist_email}}\",\n    \"password\": \"{{stylist_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Stylist Appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time\r",
									"pm.test('Response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test response structure\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(jsonData.data).to.have.property('list');\r",
									"    pm.expect(jsonData.data).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    pm.expect(Array.isArray(jsonData.data.list)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set first appointment ID as environment variable\r",
									"if (jsonData.data.list.length > 0 && jsonData.data.list[0].id) {\r",
									"    pm.environment.set('appointment_id', jsonData.data.list[0].id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/stylist/appointments?count=10&page=1&sortBy=dateTime&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"stylist",
								"appointments"
							],
							"query": [
								{
									"key": "count",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "userIds",
									"value": "{{user_id}}",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "COMPLETED",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00Z",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59Z",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "dateTime"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Stylist Appointment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response time",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse the response body",
									"var jsonData = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test('Response has required fields', function () {",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Response has required data', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"    pm.expect(jsonData.data).to.have.property('stylistId');",
									"    pm.expect(jsonData.data).to.have.property('dateTime');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('notes');",
									"    pm.expect(jsonData.data).to.have.property('estimatedDuration');",
									"    pm.expect(jsonData.data).to.have.property('totalPrice');",
									"    pm.expect(jsonData.data).to.have.property('services');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('stylist');",
									"});",
									"",
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/appointments/stylist/appointments/{{appointment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"appointments",
								"stylist",
								"appointments",
								"{{appointment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Stylist User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token and user ID after successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('user_id');",
									"pm.environment.unset('csrf_token');",
									"",
									"// Verify user and tokens are cleared",
									"pm.test('User is cleared', function () {",
									"    pm.expect(pm.environment.get('user_id')).to.be.undefined;",
									"});",
									"pm.test('Access token is cleared', function () {",
									"    pm.expect(pm.environment.get('access_token')).to.be.undefined;",
									"});",
									"pm.test('CSRF token is cleared', function () {",
									"    pm.expect(pm.environment.get('csrf_token')).to.be.undefined;",
									"});",
									"",
									"// Validate response time",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Parse response body",
									"let jsonData = pm.response.json();",
									"",
									"// Validate response structure",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "X-CSRF-Token",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}